// Generated by view binder compiler. Do not edit!
package com.example.ev_mapbox.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ev_mapbox.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDetailBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView absoluteMagnitude;

  @NonNull
  public final TextView addressline1;

  @NonNull
  public final TextView addressline2;

  @NonNull
  public final RecyclerView connectionRecycler;

  @NonNull
  public final TextView connectionTypeId;

  @NonNull
  public final TextView dateLastStatusUpdate;

  @NonNull
  public final TextView latitude;

  @NonNull
  public final TextView longitude;

  @NonNull
  public final TextView numberOfBays;

  @NonNull
  public final TextView postcode;

  @NonNull
  public final TextView state;

  @NonNull
  public final TextView title;

  @NonNull
  public final TextView town;

  @NonNull
  public final TextView usageCost;

  private FragmentDetailBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView absoluteMagnitude, @NonNull TextView addressline1,
      @NonNull TextView addressline2, @NonNull RecyclerView connectionRecycler,
      @NonNull TextView connectionTypeId, @NonNull TextView dateLastStatusUpdate,
      @NonNull TextView latitude, @NonNull TextView longitude, @NonNull TextView numberOfBays,
      @NonNull TextView postcode, @NonNull TextView state, @NonNull TextView title,
      @NonNull TextView town, @NonNull TextView usageCost) {
    this.rootView = rootView;
    this.absoluteMagnitude = absoluteMagnitude;
    this.addressline1 = addressline1;
    this.addressline2 = addressline2;
    this.connectionRecycler = connectionRecycler;
    this.connectionTypeId = connectionTypeId;
    this.dateLastStatusUpdate = dateLastStatusUpdate;
    this.latitude = latitude;
    this.longitude = longitude;
    this.numberOfBays = numberOfBays;
    this.postcode = postcode;
    this.state = state;
    this.title = title;
    this.town = town;
    this.usageCost = usageCost;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.absolute_magnitude;
      TextView absoluteMagnitude = ViewBindings.findChildViewById(rootView, id);
      if (absoluteMagnitude == null) {
        break missingId;
      }

      id = R.id.addressline1;
      TextView addressline1 = ViewBindings.findChildViewById(rootView, id);
      if (addressline1 == null) {
        break missingId;
      }

      id = R.id.addressline2;
      TextView addressline2 = ViewBindings.findChildViewById(rootView, id);
      if (addressline2 == null) {
        break missingId;
      }

      id = R.id.connection_recycler;
      RecyclerView connectionRecycler = ViewBindings.findChildViewById(rootView, id);
      if (connectionRecycler == null) {
        break missingId;
      }

      id = R.id.connection_type_id;
      TextView connectionTypeId = ViewBindings.findChildViewById(rootView, id);
      if (connectionTypeId == null) {
        break missingId;
      }

      id = R.id.dateLastStatusUpdate;
      TextView dateLastStatusUpdate = ViewBindings.findChildViewById(rootView, id);
      if (dateLastStatusUpdate == null) {
        break missingId;
      }

      id = R.id.latitude;
      TextView latitude = ViewBindings.findChildViewById(rootView, id);
      if (latitude == null) {
        break missingId;
      }

      id = R.id.longitude;
      TextView longitude = ViewBindings.findChildViewById(rootView, id);
      if (longitude == null) {
        break missingId;
      }

      id = R.id.number_of_bays;
      TextView numberOfBays = ViewBindings.findChildViewById(rootView, id);
      if (numberOfBays == null) {
        break missingId;
      }

      id = R.id.postcode;
      TextView postcode = ViewBindings.findChildViewById(rootView, id);
      if (postcode == null) {
        break missingId;
      }

      id = R.id.state;
      TextView state = ViewBindings.findChildViewById(rootView, id);
      if (state == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.town;
      TextView town = ViewBindings.findChildViewById(rootView, id);
      if (town == null) {
        break missingId;
      }

      id = R.id.usage_cost;
      TextView usageCost = ViewBindings.findChildViewById(rootView, id);
      if (usageCost == null) {
        break missingId;
      }

      return new FragmentDetailBinding((ConstraintLayout) rootView, absoluteMagnitude, addressline1,
          addressline2, connectionRecycler, connectionTypeId, dateLastStatusUpdate, latitude,
          longitude, numberOfBays, postcode, state, title, town, usageCost);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
