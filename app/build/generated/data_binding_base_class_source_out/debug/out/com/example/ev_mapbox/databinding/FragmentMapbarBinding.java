// Generated by view binder compiler. Do not edit!
package com.example.ev_mapbox.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ev_mapbox.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMapbarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ItemCardviewBinding cardviewFragment;

  @NonNull
  public final ItemMapBinding mapFragment;

  @NonNull
  public final ItemSearchbarnewBinding searchbarFragment;

  @NonNull
  public final ItemToolbarBinding toolbarFragment;

  private FragmentMapbarBinding(@NonNull ConstraintLayout rootView,
      @NonNull ItemCardviewBinding cardviewFragment, @NonNull ItemMapBinding mapFragment,
      @NonNull ItemSearchbarnewBinding searchbarFragment,
      @NonNull ItemToolbarBinding toolbarFragment) {
    this.rootView = rootView;
    this.cardviewFragment = cardviewFragment;
    this.mapFragment = mapFragment;
    this.searchbarFragment = searchbarFragment;
    this.toolbarFragment = toolbarFragment;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMapbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMapbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_mapbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMapbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardview_fragment;
      View cardviewFragment = ViewBindings.findChildViewById(rootView, id);
      if (cardviewFragment == null) {
        break missingId;
      }
      ItemCardviewBinding binding_cardviewFragment = ItemCardviewBinding.bind(cardviewFragment);

      id = R.id.map_fragment;
      View mapFragment = ViewBindings.findChildViewById(rootView, id);
      if (mapFragment == null) {
        break missingId;
      }
      ItemMapBinding binding_mapFragment = ItemMapBinding.bind(mapFragment);

      id = R.id.searchbar_fragment;
      View searchbarFragment = ViewBindings.findChildViewById(rootView, id);
      if (searchbarFragment == null) {
        break missingId;
      }
      ItemSearchbarnewBinding binding_searchbarFragment = ItemSearchbarnewBinding.bind(searchbarFragment);

      id = R.id.toolbar_fragment;
      View toolbarFragment = ViewBindings.findChildViewById(rootView, id);
      if (toolbarFragment == null) {
        break missingId;
      }
      ItemToolbarBinding binding_toolbarFragment = ItemToolbarBinding.bind(toolbarFragment);

      return new FragmentMapbarBinding((ConstraintLayout) rootView, binding_cardviewFragment,
          binding_mapFragment, binding_searchbarFragment, binding_toolbarFragment);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
